{"version":3,"sources":["components/upload-btn.js","components/colors.js","components/file-uploader.js","App.js","serviceWorker.js","index.js"],"names":["UploadBtn","styled","button","_templateObject","props","theme","color","UploadButton","state","react_default","a","createElement","Fragment","index_es","icon","spin","type","onClick","this","uploadHandler","renderButtonText","processState","Component","Black","UploaderForm","form","file_uploader_templateObject","UploaderContainer","div","_templateObject2","UploadLabel","label","_templateObject3","Uploader","input","_templateObject4","errorTheme","fileIcon","FileUploader","_this","Object","classCallCheck","possibleConstructorReturn","getPrototypeOf","call","selectedFile","loaded","uploadText","onUploadClick","bind","assertThisInitialized","event","resetState","file","target","files","test","name","setState","value","objectSpread","_this2","data","FormData","undefined","append","axios","post","concat","process","then","res","certName","fileName","console","log","catch","err","document","getElementById","reset","get","response","FileDownload","upload","download","method","action","id","size","className","onChange","onFileChange","upload_btn","getBtnColor","library","add","faFileUpload","faFileSignature","faSpinner","faTimes","faDownload","faCheckCircle","faTimesCircle","TitleContainer","App_templateObject","Container","App_templateObject2","App","file_uploader","Boolean","window","location","hostname","match","ReactDOM","render","src_App_0","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.c183e099.chunk.js","sourcesContent":["import React, { Component } from \"react\";\nimport styled from \"styled-components\";\nimport { FontAwesomeIcon } from \"@fortawesome/react-fontawesome\";\n\nconst UploadBtn = styled.button`\n  margin:20px;\n  border: none;\n  border-radius:20px;\n  height: 50px\n  width:50%;\n  background-color: ${props => props.theme.color};\n  font-size:1.5em\n  font-family: 'Raleway', sans-serif;\n  font-weight:700;\n  color:white;\n  text-align: center;\n  :focus{\n    outline: 0;\n  }\n  :active{\n    background-color: #e84118;\n  }\n  svg{\n    padding: 0px 10px\n  }\n`;\n\nclass UploadButton extends Component{\n\n  renderButtonText(state){\n    switch(state){\n    case \"choose-file\":\n      return (\n        <React.Fragment>\n          <FontAwesomeIcon icon=\"file-signature\"/>\n          Sign\n        </React.Fragment>);\n    case \"signing\":\n      return (\n        <React.Fragment>\n          <FontAwesomeIcon icon=\"spinner\" spin />;\n          Signing...\n        </React.Fragment>);\n    case \"completed\":\n      return (\n        <React.Fragment>\n          <FontAwesomeIcon icon=\"download\"/>\n          Sign\n        </React.Fragment>);\n    case \"error\":\n      return (\n        <React.Fragment>\n          <FontAwesomeIcon icon=\"times\"/>\n          Error\n        </React.Fragment>);\n    default:\n      return (\n        <React.Fragment>\n          <FontAwesomeIcon icon=\"file-signature\"/>\n          Sign\n        </React.Fragment>);\n    } \n  }\n\n\n  render(){\n    return(\n      <UploadBtn type=\"button\" onClick={this.props.uploadHandler} theme={this.props.color}>\n        {this.renderButtonText(this.props.processState)}\n      </UploadBtn>\n    );\n  }\n}\n\nexport default UploadButton;","export const Black=\"#2f3640\";\nexport const LightGreen=\"#4cd137\";\nexport const Green=\"#10ac84\";\nexport const LightBlue=\"#00a8ff\";\nexport const Blue=\"#0097e6\";\nexport const Red=\"#e84118\";\nexport const DarkRed=\"#c23616\";\nexport const Yellow=\"#fbc531\";","import React, { Component } from \"react\";\nimport styled from \"styled-components\";\nimport UploadButton from \"./upload-btn\";\nimport { FontAwesomeIcon } from \"@fortawesome/react-fontawesome\";\nimport axios from \"axios\";\nimport FileDownload from \"js-file-download\";\nimport {\n  Black,\n  Green,\n  LightBlue,\n  Red,\n  Yellow\n} from \"./colors\";\n\nconst UploaderForm = styled.form`\n  grid-area: upload-area;\n  width:100%;\n  height:100%\n  display: flex;\n  align-items: center;\n  justify-content: center;\n  flex-direction:column;\n`;\n\nconst UploaderContainer = styled.div`\n  height:300px;\n  width:50%\n  position:relative;\n  display:flex;\n  flex-direction:column\n  align-items:center;\n  justify-content:center;\n  flex-wrap:wrap;\n  border:2px dashed ${props=>props.theme.color};\n  height:300px;\n  width:50%\n  border-color\n`;\n\nconst UploadLabel = styled.label`\n  font-family: 'Raleway', sans-serif;\n  font-weight:300;\n  font-size:1em;\n  color: ${props=>props.theme.color};\n  margin-top:10px\n`;\nconst Uploader = styled.input`\n  position: absolute;\n  top:0;\n  left:0;\n  height:300px;\n  width:100%\n  opacity:0\n  `;\n\nconst errorTheme = {    \n  processState:\"error\",\n  color: Red,\n  fileIcon:\"times-circle\",\n};\n\nclass FileUploader extends Component{\n  constructor(props){\n    super(props);\n    // States : choose-file,uploading,completed,error\n    this.state={\n      selectedFile:{},\n      loaded:-1,\n      color: Black,\n      uploadText: \"Upload your .csr file here\",\n      processState: \"choose-file\",\n      fileIcon:\"file-upload\"\n    };\n    this.onUploadClick = this.onUploadClick.bind(this);\n  }\n \n  getBtnColor(){\n    switch(this.state.processState){\n    case \"choose-file\":\n      return {color:LightBlue};\n    case \"uploading\":\n      return {color:Yellow};\n    case \"completed\":\n      return {color:Green};\n    case \"error\":\n      return {color:Red};\n    default:\n      return {color:LightBlue};\n    }\n  }\n\n  onFileChange(event){\n    this.resetState();\n    let file = event.target.files[0];\n    const csrRegex =/([\\d\\D]+).csr/gi;\n    if (csrRegex.test(file.name)){\n      this.setState({\n        selectedFile: event.target.files[0],\n        uploadText:event.target.files[0].name,\n        loaded: 0,\n      });\n    } else {\n      event.target.value = null;\n      this.setState({\n        ...errorTheme,\n        uploadText: \"You can only upload .csr files\",\n      });\n    }\n  }\n\n  upload(){\n    const data = new FormData();\n    if(this.state.selectedFile === undefined){\n      this.setState({\n        ...errorTheme,\n        uploadText: \"Please select/drag a file here\"\n      });\n      return;\n    }\n\n    this.setState({\n      processState:\"uploading\",\n      color: Yellow,\n      fileIcon:\"file-signature\",\n      uploadText: \"Signing...\"\n    });\n    data.append(\"file\", this.state.selectedFile);\n    axios.post(`http://${process.env.REACT_APP_API_SERVER}:8000/upload`, data)\n      .then(res => { // then print response status\n        this.setState({\n          processState:\"completed\",\n          color:Green,\n          uploadText:\"Certificate has been signed, download it below\",\n          fileIcon:\"check-circle\",\n          certName: res.data.fileName\n        });\n        console.log(res);\n      }).catch((err)=>{\n        console.log(err);\n        this.setState({\n          ...errorTheme,\n          uploadText: \"Failed to sign cert, please try again\",\n        });\n        document.getElementById(\"cert-uploader\").reset();\n        console.log(\"Cert Failed to be signed.\");\n      });\n  }\n\n  async download(){\n    let response = await axios.get(`http://${process.env.REACT_APP_API_SERVER}:8000/signed?filename=${this.state.certName}`);\n    FileDownload(response.data, \"signedCert.crt\");\n    document.getElementById(\"cert-uploader\").reset();\n    this.resetState();\n  }\n\n  resetState(){\n    this.setState({\n      selectedFile: undefined,\n      uploadText: \"Upload your .csr file here\",\n      color:Black,\n      processState: \"choose-file\",\n      fileIcon:\"file-upload\"\n    });\n  }\n  \n  onUploadClick(){\n    switch(this.state.processState){\n    case \"choose-file\":\n      this.upload();\n      break;\n    case \"completed\":\n      this.download();\n      break;\n    case \"error\":\n      this.resetState();\n      break;\n    default:\n    }\n  }\n\n  render(){\n    return (\n      <UploaderForm method=\"post\" action=\"#\" id=\"cert-uploader\">\n        <UploaderContainer theme={{color:this.state.color}}>\n          <FontAwesomeIcon icon={this.state.fileIcon} size=\"2x\" color={this.state.color}/>\n          <UploadLabel className=\"uploadText\" theme={{color:this.state.color}}>{this.state.uploadText}</UploadLabel>\n          <Uploader type=\"file\" name=\"file\" onChange={this.onFileChange.bind(this)} />\n        </UploaderContainer>\n        <UploadButton  uploadHandler={this.onUploadClick} processState={this.state.processState} color={this.getBtnColor()}/>\n      </UploaderForm>\n    );\n  }\n}\n\nexport default FileUploader;","import React, { Component } from \"react\";\nimport \"./App.css\";\nimport styled from \"styled-components\";\nimport {FileUploader} from \"./components\";\nimport { library } from \"@fortawesome/fontawesome-svg-core\";\nimport { faFileUpload,faFileSignature, faSpinner, faTimes, faDownload,faCheckCircle,faTimesCircle} from \"@fortawesome/free-solid-svg-icons\";\n\nlibrary.add([faFileUpload,faFileSignature,faSpinner, faTimes, faDownload, faCheckCircle, faTimesCircle]);\n\nconst TitleContainer= styled.div`\n  grid-area: header;\n  font-family: 'Raleway', sans-serif;\n\n  display:flex;\n  flex-direction:column;\n  justify-content: center;\n  align-items:center;\n  text-align: center\n  .title{\n    font-weight:900;\n    font-size: 3em;\n    margin: 0px 5px\n  }\n  .subtitle{\n    font-size:1.5em\n    font-weight:700;\n    color: #576574;\n    margin: 0px 5px;\n  }\n\n`;\nconst Container = styled.div`\n  display:grid;\n  position: absolute;\n  top:0;\n  left:0;\n  width: 100%;\n  height: 100%;\n  grid-template: 50px 100px 1fr / 1fr 80% 1fr;\n  grid-template-areas:\n  \"l-pad c-pad r-pad\"\n  \"l-pad header r-pad\"\n  \"l-pad upload-area r-pad\"\n`;\n\n\nclass App extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      selectedFile: null,\n      loaded: 0\n    };\n\n  }\n\n  render() {\n    return (\n      <Container>\n        <TitleContainer>\n          <h1 className=\"title\">CSE CENTRAL</h1>\n          <p className=\"subtitle\">A SUTD Certificate Authority</p>\n        </TitleContainer>\n        <FileUploader></FileUploader>\n      </Container>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport App from \"./App\";\nimport * as serviceWorker from \"./serviceWorker\";\nReactDOM.render(<App />, document.getElementById(\"root\"));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}